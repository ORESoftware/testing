'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const cp = require("child_process");
const ping = require('tcp-ping');
const broker_1 = require("./broker");
const p = require.resolve('./launch-broker-child');
const log = {
    info: console.log.bind(console, ' [live-mutex utils]'),
    error: console.error.bind(console, ' [live-mutex utils]')
};
exports.once = function (ctx, fn) {
    let callable = true;
    return function (err) {
        if (callable) {
            callable = false;
            return fn.apply(ctx === 'that' ? this : ctx, arguments);
        }
        else if (err) {
            log.error(err.stack || err.message || err);
        }
    };
};
exports.launchSocketServer = function (opts, cb) {
    const host = opts.host || 'localhost';
    const port = opts.port || 6970;
    ping.probe(host, port, function (err, available) {
        if (err) {
            return cb(err);
        }
        if (available) {
            return cb(null, 'available');
        }
        return new broker_1.Broker({ host: host, port: port })
            .ensure(cb);
    });
};
exports.launchSocketServerp = function (opts) {
    return new Promise((resolve, reject) => {
        exports.launchSocketServer(opts, function (err, val) {
            err ? reject(err) : resolve(val);
        });
    });
};
exports.conditionallyLaunchSocketServer = exports.launchSocketServer;
exports.conditionallyLaunchSocketServerp = exports.launchSocketServerp;
exports.launchBrokerInChildProcess = function (opts, cb) {
    const host = opts.host || 'localhost';
    const port = opts.port || 8019;
    const detached = Boolean(opts.detached);
    ping.probe(host, port, function (err, available) {
        if (err) {
            return cb(err);
        }
        if (available) {
            log.info(`live-mutex broker/server was already live at ${host}:${port}.`);
            return cb(null, { host, port, alreadyRunning: true });
        }
        log.info(`live-mutex is launching new broker at '${host}:${port}'.`);
        const n = cp.spawn('node', [p], {
            detached,
            env: Object.assign({}, process.env, {
                LIVE_MUTEX_PORT: port
            })
        });
        if (detached) {
            n.unref();
        }
        process.once('exit', function () {
            if (!detached) {
                n.kill('SIGINT');
            }
        });
        n.stderr.setEncoding('utf8');
        n.stdout.setEncoding('utf8');
        n.stderr.pipe(process.stderr);
        let stdout = '';
        n.stdout.on('data', function (d) {
            stdout += String(d);
            if (stdout.match(/live-mutex broker is listening/i)) {
                n.stdout.removeAllListeners();
                if (detached) {
                    n.unref();
                }
                cb(null, {
                    liveMutexProcess: n,
                    host,
                    port,
                    detached
                });
            }
        });
    });
};
exports.launchBrokerInChildProcessp = function (opts) {
    return new Promise((resolve, reject) => {
        exports.launchBrokerInChildProcess(opts, function (err, val) {
            err ? reject(err) : resolve(val);
        });
    });
};
