#!/usr/bin/env node
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const net = require("net");
const readline = require("readline");
const chalk_1 = require("chalk");
const json_parser_1 = require("./json-parser");
exports.log = {
    info: console.log.bind(console, ' [live-mutex client]'),
    error: console.error.bind(console, ' [live-mutex client]')
};
const port = parseInt(process.argv[2] || process.env.live_mutex_port || '6970');
const s = net.createConnection({ port });
s.setEncoding('utf8');
s.once('error', function (e) {
    exports.log.error('socket experienced an error:', e);
});
s.pipe(json_parser_1.createParser()).on('data', function (d) {
    console.log('server response:', String(d.inspectResult));
    process.stdout.write(chalk_1.default.blueBright('live mutex > '));
});
const acceptableCommands = {
    'lockcount': true,
    'lock-count': true,
    'clientcount': true,
    'fff': true
};
s.once('connect', function () {
    console.log(chalk_1.default.green('client is connected to live-mutex broker at port:'), chalk_1.default.greenBright.bold(String(port)));
    process.stdout.write(chalk_1.default.blueBright('live mutex > '));
    const rl = readline.createInterface({
        input: process.stdin,
    });
    rl.on('line', function (d) {
        readline.clearLine(process.stdout, 0);
        readline.cursorTo(process.stdout, 0);
        const lc = String(d || '').trim().toLowerCase();
        if (!lc) {
            process.stdout.write(chalk_1.default.blueBright('live mutex > '));
            return;
        }
        if (lc === 'clear') {
            process.stdout.write('\x1Bc');
            process.stdout.write(chalk_1.default.blueBright('live mutex > '));
            return;
        }
        if (acceptableCommands[lc]) {
            console.log('sending message to server:', String(d));
            s.write(JSON.stringify({ inspectCommand: String(d) }) + '\n');
        }
        else {
            console.log('Command not recognized:', lc);
            console.log('Try using "help" to view available commands.');
            process.stdout.write(chalk_1.default.blueBright('live mutex > '));
        }
    });
    rl.on('close', () => {
        console.log('\n Hope you enjoyed your time here!');
        process.exit(0);
    });
});
