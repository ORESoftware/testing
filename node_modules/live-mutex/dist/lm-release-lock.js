#!/usr/bin/env node
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("./client");
const chalk_1 = require("chalk");
const port = parseInt(process.argv[3] || process.env.live_mutex_port || '6970');
const key = process.argv[2] || process.env.live_mutex_key || '';
if (!Number.isInteger(port)) {
    client_1.log.error('Live-mutex: port could not be parsed to integer from command line input.');
    client_1.log.error('Usage: lm_acquire_lock <key> <?port>');
    process.exit(1);
}
if (!key) {
    client_1.log.error('Live-mutex: no key passed at command line.');
    client_1.log.error('Usage: lm_acquire_lock <key> <?port>');
    process.exit(1);
}
process.once('warning', function (e) {
    client_1.log.error('process warning:', e && e.message || e);
});
process.once('unhandledRejection', function (err) {
    client_1.log.error('unhandledRejection:', err);
    process.exit(1);
});
process.once('uncaughtException', function (err) {
    client_1.log.error('uncaughtException:', err);
    process.exit(1);
});
new client_1.Client({ port }).ensure().then(function (c) {
    c.unlock(key, { ttl: 6000, isViaShell: true }, function (e) {
        if (e) {
            client_1.log.error(chalk_1.default.magenta.bold(e && e.message || e));
            client_1.log.error(`To discover what is going on with the broker, use '$ lm_inspect_broker -p <port> -h <host>'.`);
            return process.exit(1);
        }
        client_1.log.info(chalk_1.default.green.bold(`${chalk_1.default.italic('Unlocked')} lock for key:`), `'${chalk_1.default.blueBright.bold(key)}'`);
        process.exit(0);
    });
});
